// Code generated by go-uaa/generator; DO NOT EDIT.

package uaa

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"{{if .SupportsPaging}}
	"net/url"
	"strconv"{{end}}
)

// Get{{.ModelTypeName}} with the given {{tolower .ModelTypeName}}ID.
func (a *API) Get{{.ModelTypeName}}({{tolower .ModelTypeName}}ID string) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, fmt.Sprintf("%s/%s", {{.ModelPluralTypeName}}Endpoint, {{tolower .ModelTypeName}}ID))
	{{tolower .ModelTypeName}} := &{{.ModelTypeName}}{}
	err := a.doJSON(http.MethodGet, &u, nil, 	{{tolower .ModelTypeName}}, true)
	if err != nil {
		return nil, err
	}
	return 	{{tolower .ModelTypeName}}, nil
}

// Create{{.ModelTypeName}} creates the given {{tolower .ModelTypeName}}.
func (a *API) Create{{.ModelTypeName}}({{tolower .ModelTypeName}} {{.ModelTypeName}}) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	created := &{{.ModelTypeName}}{}
	j, err := json.Marshal({{tolower .ModelTypeName}})
	if err != nil {
		return nil, err
	}
	err = a.doJSON(http.MethodPost, &u, bytes.NewBuffer([]byte(j)), created, true)
	if err != nil {
		return nil, err
	}
	return created, nil
}

// Update{{.ModelTypeName}} updates the given {{tolower .ModelTypeName}}.
func (a *API) Update{{.ModelTypeName}}({{tolower .ModelTypeName}} {{.ModelTypeName}}) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, fmt.Sprintf("%s/%s", {{.ModelPluralTypeName}}Endpoint, {{tolower .ModelTypeName}}.Identifier()))

	created := &{{.ModelTypeName}}{}
	j, err := json.Marshal({{tolower .ModelTypeName}})
	if err != nil {
		return nil, err
	}
	err = a.doJSONWithHeaders(http.MethodPut, &u, map[string]string{"If-Match": "*"}, bytes.NewBuffer([]byte(j)), created, true)
	if err != nil {
		return nil, err
	}
	return created, nil
}

// Delete{{.ModelTypeName}} deletes the {{tolower .ModelTypeName}} with the given {{tolower .ModelTypeName}} ID.
func (a *API) Delete{{.ModelTypeName}}({{tolower .ModelTypeName}}ID string) (*{{.ModelTypeName}}, error) {
	if {{tolower .ModelTypeName}}ID == "" {
		return nil, errors.New("{{tolower .ModelTypeName}}ID cannot be blank")
	}
	u := urlWithPath(*a.TargetURL, fmt.Sprintf("%s/%s", {{.ModelPluralTypeName}}Endpoint, {{tolower .ModelTypeName}}ID))
	deleted := &{{.ModelTypeName}}{}
	err := a.doJSON(http.MethodDelete, &u, nil, deleted, true)
	if err != nil {
		return nil, err
	}
	return deleted, nil
}

{{if .SupportsPaging}}// List{{.ModelPluralTypeName}} with the given filter, sortBy, attributes, sortOrder, startIndex
// (1-based), and count (default 100).
// If successful, List{{.ModelPluralTypeName}} returns the {{tolower .ModelPluralTypeName}} and the total itemsPerPage of {{tolower .ModelPluralTypeName}} for
// all pages. If unsuccessful, List{{.ModelPluralTypeName}} returns the error.
func (a *API) List{{.ModelPluralTypeName}}(filter string, sortBy string{{if .SupportsAttributes}}, attributes string{{end}}, sortOrder SortOrder, startIndex int, itemsPerPage int) ([]{{.ModelTypeName}}, Page, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	query := url.Values{}
	if filter != "" {
		query.Set("filter", filter)
	}
	{{if .SupportsAttributes}}if attributes != "" {
		query.Set("attributes", attributes)
	}
	{{end}}if sortBy != "" {
		query.Set("sortBy", sortBy)
	}
	if sortOrder != "" {
		query.Set("sortOrder", string(sortOrder))
	}
	if startIndex == 0 {
		startIndex = 1
	}
	query.Set("startIndex", strconv.Itoa(startIndex))
	if itemsPerPage == 0 {
		itemsPerPage = 100
	}
	query.Set("count", strconv.Itoa(itemsPerPage))
	u.RawQuery = query.Encode()

	{{tolower .ModelPluralTypeName}} := &paginated{{.ModelTypeName}}List{}
	err := a.doJSON(http.MethodGet, &u, nil, {{tolower .ModelPluralTypeName}}, true)
	if err != nil {
		return nil, Page{}, err
	}
	page := Page{
		StartIndex:   {{tolower .ModelPluralTypeName}}.StartIndex,
		ItemsPerPage: {{tolower .ModelPluralTypeName}}.ItemsPerPage,
		TotalResults: {{tolower .ModelPluralTypeName}}.TotalResults,
	}
	return {{tolower .ModelPluralTypeName}}.Resources, page, err
}

// ListAll{{.ModelPluralTypeName}} retrieves UAA {{tolower .ModelPluralTypeName}}
func (a *API) ListAll{{.ModelPluralTypeName}}(filter string, sortBy string{{if .SupportsAttributes}}, attributes string{{end}}, sortOrder SortOrder) ([]{{.ModelTypeName}}, error) {
	page := Page{
		StartIndex:   1,
		ItemsPerPage: 100,
	}
	var (
		results     []{{.ModelTypeName}}
		currentPage []{{.ModelTypeName}}
		err         error
	)

	for {
		currentPage, page, err = a.List{{.ModelPluralTypeName}}(filter, sortBy{{if .SupportsAttributes}}, attributes{{end}}, sortOrder, page.StartIndex, page.ItemsPerPage)
		if err != nil {
			return nil, err
		}
		results = append(results, currentPage...)

		if (page.StartIndex + page.ItemsPerPage) > page.TotalResults {
			break
		}
		page.StartIndex = page.StartIndex + page.ItemsPerPage
	}
	return results, nil
}{{else}}// List{{.ModelPluralTypeName}} fetches all of the {{.ModelTypeName}} records.
// If successful, List{{.ModelPluralTypeName}} returns the {{tolower .ModelPluralTypeName}}
// If unsuccessful, List{{.ModelPluralTypeName}} returns the error.
func (a *API) List{{.ModelPluralTypeName}}() ([]{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	var {{tolower .ModelPluralTypeName}} []{{.ModelTypeName}}
	err := a.doJSON(http.MethodGet, &u, nil, &{{tolower .ModelPluralTypeName}}, true)
	if err != nil {
		return nil, err
	}
	return {{tolower .ModelPluralTypeName}}, nil
}{{end}}
